{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww16700\viewh11520\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs36 \cf0 Tower of Psych
\fs24 \
"Tower of Psych", or "tops", is a code project started by benjamin.heasly@gmail.com in July of 2009.  It aims to facilitate the design and running of psychophysics experiments in Matlab.  The idea is that a lot of psychophysics experiments have a lot of organization in common, and this organization should be factored into well-behaving classes with handy graphical interfaces.\
\
This document is intended as a tops survey and introduction.  It discusses the high-level philosophies and design choices of tops, some of the Matlab concepts used commonly in tops, and each of the four tops "foundataion" classes.\
\
A good follow-up to this document would be "encounter-as-tops-demo.rtf".  It explains the "encounter" game, which is one of the demos that comes with tops.  encounter synthesizes all the tops foundation classes into a game that is similar to a psychophysics experiment.\
\

\fs36 tops big ideas\

\fs24 The main goal of tops is that it should be worth a user's time to design an experiment so that it agrees with the way tops factors functionality.  That is, it may cost a user some effort to cast his/her experiment in terms of tops classes, but the payoff should be greater, of well-behaving classes, transparent guis, and pre-invented wheels.  Otherwise, tops is designed wrong (or worse, the very idea is wrong that psychophysics experiments have most of their organization in common).\
\
tops should depend only on Matlab.  You should be able to use all of the features of all of the tops classes and functions without installing any other library.  For example, the default timekeeping function for tops classes is Matlab's builtin @now function.  @now may be inconvenient (it keeps time in days, not seconds) or inadequate for some purposes, but it is the highest-precision, standalone clock function that Matlab provides.\
\
However, tops should easily interface with other libraries.  For example, tops classes can easily substitute a different timekeeping function for @now.  Psychtoolbox's @GetSecs might be a suitable choice, or perhaps some other custom function that counts trials.\
\
tops should encourage a myopic design habit.  That is, users should be able to design narrowly-purposed functions and classes (i.e. draw this stimulus, check this input) and let tops integrated them into grander behavior.  tops itself should be hyperopic.  That is, it should provide structure and leave the details of an experiment up to the experimenter. \
\
tops frequently uses the concepts of 
\i mode
\i0  and 
\i mnemonic
\i0  to organize data.  These are similar concepts in that they are both strings and they are both user-defined labels.  But they are different:\
	-A 
\i mode
\i0  should describe a particular set of values (e.g. data from "reaction time task") or a particular mode of operation (e.g. objects that "check for input").  \
	-A 
\i menmonic
\i0  should be more like a tag for a single value (e.g. "reaction time") or object  or (e.g. "left mouse button").\
\

\fs36 tops Matlab concepts\

\fs24 One of the major currencies of tops is the 
\i fevalable
\i0  cell array.  This is a cell array whose first element is a function handle and whose other elements are arguments to pass to that function.  For example the Matlab code,\
	
\f1 foo = \{@disp, 'abracadabra'\};
\f0 \
defines a 
\i fevalable
\i0  cell array called "foo" which, when executed, will display "abracadabra" in the Matlab command window.\
\
Another way to think of 
\i fevalable
\i0  cell arrays is that they must work with Matlab's @feval function.  Thus, foo is a 
\i fevalable
\i0  cell array if it's possible to execute the code\

\f1 	feval(foo\{:\});
\f0 \
\
It may be worth noting that the 
\i fevalable
\i0  cell array is not a new data type.  It's just a way of using Matlab's cell arrays and function handles to package up a function with some data.  Since this usage is common throughout tops, it's useful to give it the name "fevalable
\i "
\i0 .\
\
Matlab also defines the 
\i anonymous function
\i0 , which is another way of packaging a function with some data.  In many cases the 
\i fevalable
\i0  and the 
\i anonymous function
\i0  produce the same behavior.  Consider the following two examples, which would each print "abracadabra" on the Matlab command window:\
\

\f1 % fevalable\
fun = \{@disp, 'abracadabra'\};\
feval(fun\{:\});\
\
% anonymous function\
fun = @() disp('abracadabra');\
feval(fun);
\f0 \
\
tops favors the 
\i fevalable
\i0  because it has a more intuitive appearance and because each element of an 
\i fevalable
\i0  can be accessed and manipulated programmatically.  But anonymous functions are still useful and still used by tops, especially as callbacks for Matlab graphics objects.\
\
subfunctions are scope-safe\
\
handle classes, passing by reference\
\

\fs36 tops foundation
\fs24 \
tops defines four "foundataion" classes that should support many different kinds of experiments:\
	-topsBlockTree manages experiment setup, tear-down, and traversal of various task and trial conditions.\
	-topsFunctionLoop; manages concurrent operations (e.g. checking user input while drawing graphics)\
	-topsModalList: holds arbitrary values and objects, grouped by operational modes (e.g. various tasks)\
	-topsDataLog: logs arbitrary values with timestamps and string mnemonics (may refuse handles or even enforce doubles at some point?)\
\
Each of these foundation classes comes [eventually] with a graphical user interface (gui).  Each gui's main job is to keep its appearance in sync with the foundation object it represents and thereby provide the user with a good look "under the hood" of that object.  In a few cases where it makes the most sense, a gui can also provide access to an object's methods or allow the user to edit an object's properties.\
\
\
Copyright 2009 by benjamin.heasly@gmail.com}