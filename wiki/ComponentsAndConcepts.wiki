#summary Intro to Components and Concepts of Tower of Psych
#labels Featured

Here is an introduction to the major design concepts and software components used in Tower of Psych.

<wiki:toc max_depth="3" />

=Concepts=

===Object-Oriented Design===
Tower of Psych is designed around [http://en.wikipedia.org/wiki/Object-oriented_design classes and objects].  Classes make it easier to reuse code between similar jobs.  Objects make it easier to break a job into intuitive pieces.

Matlab has supported classes and _handle_ objects since [http://www.mathworks.com/help/techdoc/matlab_oop/brqzfth-1.html#brqzfth-3 version 7.6/2008a].  Tower of Psych requires this version or later.

===High-Level Integration===
Tower of Psych deals with the high-level organization of psychophysics tasks.  It doesn't deal with low-level problems like hardware input devices, model fitting, or advanced graphics.  It expects that users and other tool kits will solve these problems narrowly, then let Tower of Psych integrate the solutions.

Since it leaves out the low-level details, Tower of Psych requires only built-in Matlab functionality.  It runs on Matlab "out of the box".  Tower of Psych can make use of a few other tool kits, but these are optional.

===Tests===
Tower of Psych is developed with unit testing in mind.  Unit tests are a way to execute code automatically and check for errors.  Many "test/" folders through out the project contain test definitions.  They are not necessary for running tasks.

Thanks to the [http://www.mathworks.com/matlabcentral/fileexchange/22846-matlab-xunit-test-framework MATLAB xUnit Test Framework].

===Documentation===
Tower of Psych uses [http://tower-of-psych.googlecode.com/svn/documentation/html/index.html online HTML documentation] generated by Doxygen.  This documentation is rich, cross-linked, and integrated with the base code.  It "knows about" the project's object-oriented design.  Matlab's "help" and "doc" documentation just aren't as good.

Thanks to [http://www.stack.nl/~dimitri/doxygen/ Doxygen].

In order for Doxygen to understand Matlab code, Tower of Psych uses a filter for converting m-code to something resembling C++.  This filter might be useful to other projects, and can be downloaded [http://code.google.com/p/tower-of-psych/downloads/detail?name=oom2cpp.zip#makechanges here].

===_Fevalable_ Function Calls===
Tower of Psych defines some jargon for calling functions: an _fevalable_ is a cell array that contains a function_handle as the first element and function arguments as subsequent elements.  For example, `foo = {@disp, 'abracadabra'}` defines an _fevalable_ called `foo`.

_Fevalables_ can be stored as variables and invoked later with Matlab's `feval()` function.  For example, `feval(foo{:})` would display `abracadabra` in the Command Window.

Thesse packaged-up function call are handy and you can use them in any Matlab code.  Since Tower of Psych uses them a lot, it's useful to have a name for them.  So, many variables and object properties in Tower of Psych contain the word "_fevalable_".

Matlab also has _anonymous functions_ which are similar to _fevalables_.  They look very similar:
{{{
% fevalable
foo = {@disp, 'abracadabra'};
feval(foo{:});

% anonymous function
foo = @() disp('abracadabra');
feval(foo);
}}}

Tower of Psych favors _fevalables_ because they can be visualized and edited like any cell array.  There have also been a few strange usage patters involving _handle_ objects and _anonymous functions_, which cause Matlab to behave strangely.  _Fevalables_ seem to avoid these patterns.

=Components=

===_Runnable_ Objects===
Tower of Psych uses _runnable_ objects to organize the flow of events during a task.  These let you specify what should happen in a flexible way.  They let you visualize the structure of a task before running it.  They automatically record the "what" and "when" during an experiment.

There are several flavors of _runnables_, each offering a different kind of flow.  These can be combined differently for each task.

====Tree Nodes====
Tree nodes emphasize a hierarchical flow of control.  They combine to form a tree structure in which each node may have several children.  The tree structure resembles folders and sub-folders in a file system.

Parent nodes get executed first, then child nodes, and so on, until reaching a node without children.  Then parents get executed in reverse order.  This is useful for doing setup and cleanup at nested levels of detail.

====Concurrency====
Concurrent objects are able to run together, at the same time.  This can be a challenge in Matlab, since Matlab provides a single-threaded environment.  Concurrent objects define behaviors that they can _run briefly_, and these brief behaviors can be interleaved.

====Ensembles====
Ensembles provide a way to group similar objects together.  For example, a task may use multiple objects that all need to _draw_.  When all of these objects are added to to an ensemble, they can all _draw_ with a single command.  They can also be configured to _draw_ repeatedly and automatically.

The Tower of Psych documentation shows the entire family of _[http://tower-of-psych.googlecode.com/svn/documentation/html/classtops_runnable.html runnables]_.

===GUIs===
Tower of Psych provides Graphical User Interfaces (GUIs) for most of its classes.  These allow you to inspect the details of individual objects or to visualize collections of objects.  They aim to make it easier to write code without being a coding expert.

The GUIs take advantage of some [http://undocumentedmatlab.com/ Undocumented Matlab] features.  These add richness and functionality that are unavailable in regular Matlab GUIs.  Nevertheless, they should work in Matlab "out of the box".

Some of the GUI code might be useful to other Matlab projects.  In particular, the "drill down" GUI allows you to browse the fields, properties, and elements of struct arrays, object arrays, and cell arrays.  These can be nested to arbitrary depth.

On the command line, you can checkout the GUI code like this:
{{{
svn checkout http://tower-of-psych.googlecode.com/svn/trunk/guis gui-stuff
}}}

In Matlab, you can create a "drill down" GUI for any item like this:
{{{
cd gui-stuff
myItem = dir();
topsGUIUtilities.openBasicGUI(myItem, 'my directory');
}}}

===Graphing===
Tower of Psych provides some utilities for making diagrams and flow charts with the free [http://www.graphviz.org/ GraphViz] program.

On the command line, you can checkout the graphing code like this:
{{{
svn checkout http://tower-of-psych.googlecode.com/svn/utilities/graphing graphing-stuff
}}}

In Matlab, you can try a graphing demo.  This one makes a diagram of the function calls recorded by the Matlab profiler, during a polynomial fit:
{{{
cd graphing-stuff/demos
demoProfilerGrapher();
}}}

===Spatial Classification===
Tower of Psych implements a spatial model for classifying data.  It maps data from n data sources onto independent dimensions in an n-dimensional space.  It assigns regions in the space to arbitrary outputs.

The spatial model supports complex data classification tasks.  For example, a constellation of data like "the mouse cursor is in the upper-left part of the screen and the primary mouse button is down, and the keyboard shift key is down" could be represented as a region in space.  The region could map to an output like "chose wrong target".

Taking one sample from each data source amounts to indexing a single point in the n-dimensional space.  The spatial model attempts to do this efficiently by using Matlab's matrix functionality and flexible indexing scheme.

===Logging===
Tower of Psych provides a facility for logging data during a task, called `topsDataLog`.  `topsDataLog` is a _singleton_ class, which means only one log exists at a time.  The class provides _static_ methods, which means that any m-code can access the log.

`topsDataLog` accepts arbitrary _data_, along with a _name_ used to group together similar _data_.  It records a _timestamp_ for each _data_ item.

Here's an example of clearing the data log, logging several data items, and viewing the contents of the log in a GUI:
{{{
topsDataLog.flushAllData();
topsDataLog.logDataInGroup('this is my data', 'demo group');
topsDataLog.logDataInGroup('this is more data', 'demo group');
topsDataLog.logDataInGroup('this is silly data', 'demo group');
topsDataLog.logDataInGroup(42, 'different group');
topsDataLog.logDataInGroup(-inf, 'different group');
topsDataLog.gui();
}}}