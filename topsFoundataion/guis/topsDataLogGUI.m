classdef topsDataLogGUI < handle
    properties
        fig;
        
        shownMnemonicsLabel;
        shownMnemonicsList;
        
        triggerMnemonicsToggle;
        triggerMnemonicsLabel;
        triggerMnemonicsList;
        
        dataLogAxes;
        
        flushLogButton;
        refreshGUIButton;
        
        listeners = struct();
        
        zeroTime = nan;
    end
    
    methods
        function self = topsDataLogGUI()
            self.createWidgets;
            self.listenToDataLog;
        end
        function delete(self)
            if ~isempty(self.fig) && ishandle(self.fig);
                delete(self.fig);
            end
            delete(struct2array(self.listeners));
        end
        
        function createWidgets(self)
            self.setupFigure;
            
            w = [.48, .15];
            h = [.05, .44, .93];
            x = [.01, .34, .51, .84];
            y = cumsum([.01, h([2 1 2 1])]);
            
            self.shownMnemonicsLabel = uicontrol( ...
                'Parent', self.fig, ...
                'Style', 'text', ...
                'Units', 'normalized', ...
                'String', 'mnemonics to display', ...
                'Position', [x(1), y(4), w(1), h(1)], ...
                'BackgroundColor', get(self.fig, 'Color'), ...
                'HorizontalAlignment', 'left');
            
            self.shownMnemonicsList = uicontrol( ...
                'Parent', self.fig, ...
                'Style', 'listbox', ...
                'Units', 'normalized', ...
                'String', topsDataLog.getAllMnemonics, ...
                'Position', [x(1), y(3), w(1), h(2)], ...
                'BackgroundColor', get(self.fig, 'Color'), ...
                'HorizontalAlignment', 'left', ...
                'Min', 0, ...
                'Max', 100);
            
            self.triggerMnemonicsLabel = uicontrol( ...
                'Parent', self.fig, ...
                'Style', 'text', ...
                'Units', 'normalized', ...
                'String', 'mnemonics for trigger', ...
                'Position', [x(1), y(2), w(1), h(1)], ...
                'BackgroundColor', get(self.fig, 'Color'), ...
                'HorizontalAlignment', 'left');
            
            self.triggerMnemonicsToggle = uicontrol( ...
                'Parent', self.fig, ...
                'Style', 'togglebutton', ...
                'Units', 'normalized', ...
                'String', 'trigger', ...
                'Position', [x(2), y(2), w(2), h(1)], ...
                'HorizontalAlignment', 'left');
            
            self.triggerMnemonicsList = uicontrol( ...
                'Parent', self.fig, ...
                'Style', 'listbox', ...
                'Units', 'normalized', ...
                'String', topsDataLog.getAllMnemonics, ...
                'Position', [x(1), y(1), w(1), h(2)], ...
                'BackgroundColor', get(self.fig, 'Color'), ...
                'HorizontalAlignment', 'left', ...
                'Min', 0, ...
                'Max', 100);
            
            self.dataLogAxes = axes( ...
                'Parent', self.fig, ...
                'Box', 'on', ...
                'Color', [1 1 1], ...
                'HitTest', 'off', ...
                'Position', [x(3), y(1), w(1), h(3)], ...
                'XTick', [], ...
                'XLim', [0 1], ...
                'YTick', [], ...
                'YLim', [0 1], ...
                'YDir', 'reverse');
            dataLogLines = [];
            dataLogTexts = [];
            dataLogPreviousLines = [];
            
            self.flushLogButton = uicontrol ( ...
                'Parent', self.fig, ...
                'Style', 'pushbutton', ...
                'Units', 'normalized', ...
                'String', 'flush log', ...
                'Callback', @(obj, event) topsDataLog.flushAllData, ...
                'Position', [x(3), y(4), w(2), h(1)], ...
                'HorizontalAlignment', 'left');
            
            self.refreshGUIButton = uicontrol ( ...
                'Parent', self.fig, ...
                'Style', 'pushbutton', ...
                'Units', 'normalized', ...
                'String', 'refresh GUI', ...
                'Callback', @(obj, event) self.createWidgets, ...
                'Position', [x(4), y(4), w(2), h(1)], ...
                'HorizontalAlignment', 'left');
        end
        
        function setupFigure(self)
            if ~isempty(self.fig) && ishandle(self.fig)
                clf(self.fig)
            else
                self.fig = figure;
            end
            set(self.fig, ...
                'HandleVisibility', 'off', ...
                'MenuBar', 'none', ...
                'Name', mfilename, ...
                'NumberTitle', 'off', ...
                'ToolBar', 'none');
        end
        
        function listenToDataLog(self)
            theLog = topsDataLog.theDataLog;
            
            delete(struct2array(self.listeners))
            self.listeners.NewMnemonic = theLog.addlistener( ...
                'NewMnemonic', ...
                @(source, event) self.hearNewMnemonic(source, event));
            self.listeners.NewDataForMnemonic = theLog.addlistener( ...
                'NewDataForMnemonic', ...
                @(source, event) self.hearNewDataForMnemonic(source, event));
            self.listeners.FlushedTheDataLog = theLog.addlistener( ...
                'FlushedTheDataLog', ...
                @(source, event) self.hearFlushedTheDataLog(source, event));
        end
        
        function hearNewMnemonic(self, theLog, event)
            mnemonics = theLog.getAllMnemonics;
            insert = find(strcmp(mnemonics, event.UserData));
            set(self.shownMnemonicsList, 'String', mnemonics);
            set(self.triggerMnemonicsList, 'String', mnemonics);
            
            if length(mnemonics) > 1
                self.fixListSelectionsAfterInsert(self.shownMnemonicsList, insert);
                self.fixListSelectionsAfterInsert(self.triggerMnemonicsList, insert);
            end
        end
        
        function fixListSelectionsAfterInsert(self, list, insert)
            selected = get(list, 'Value');
            bump = selected >= insert;
            selected(bump) = selected(bump) + 1;
            set(list, 'Value', selected);
        end
        
        function hearNewDataForMnemonic(self, theLog, eventData)
            
            logStruct = eventData.UserData;
            
            % replace nan, preserve trigger time
            self.zeroTime = max(self.zeroTime, theLog.earliestTime);
            set(self.dataLogAxes, 'YLim', [0 logStruct.time-self.zeroTime+eps]);
            
            mnemonics = theLog.getAllMnemonics;
            if get(self.triggerMnemonicsToggle, 'Value')
                trig = get(self.triggerMnemonicsList, 'Value');
                if any(strcmp(mnemonics(trig), logStruct.mnemonic))
                    self.trigger(logStruct);
                end
            end
            
            show = get(self.shownMnemonicsList, 'Value');
            if any(strcmp(mnemonics(show), logStruct.mnemonic))
                self.plotLogEntry(logStruct);
            end
        end
        
        function trigger(self, logStruct)
            self.zeroTime = logStruct.time;
            cla(self.dataLogAxes);
        end
        
        function plotLogEntry(self, logStruct)
            % fudge a color for each mnemonic by BS hashing
            colNum = mod(sum(logStruct.mnemonic), 7);
            col = dec2bin(colNum, 3)=='1';
            
            summary = sprintf('%s: %s', ...
                logStruct.mnemonic, ...
                stringifyValue(logStruct.data));

            y = logStruct.time - self.zeroTime;
            
            line( ...
                [0 .1], [y y], ...
                'Parent', self.dataLogAxes, ...
                'Color', col, ...
                'LineStyle', '-', ...
                'Marker', 'none');
            
            text( ...
                .11, y, summary, ...
                'FontName', 'Courier', ...
                'HitTest', 'off', ...
                'Interpreter', 'none', ...
                'Parent', self.dataLogAxes, ...
                'Color', col);
        end
        
        function hearFlushedTheDataLog(self, theLog, eventData)
            self.createWidgets;
        end
    end
end