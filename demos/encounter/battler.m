classdef battler < handle
    %Class to represent character or monster in the "encounter" game
    
    properties (SetObservable)
        name = 'nameless';
        hp = 1;
        maxHp = 1;
    end
    
    properties (Hidden)
        isMonster = false;
        isDead = false;
        
        attackInterval = 1;
        attackMean = 1;
        
        bodyHandle;
        nameHandle;
        damageHandle;
    end
    
    methods
        function self = battler
        end
        
        function restoreHp(self)
            self.isDead = false;
            self.hp = self.maxHp;
        end
        
        function makeGraphicsForAxesAtPositionWithCallback(self, axes, position, callback)
            
            if self.isMonster
                % create funky shape for monsters
                n = 7;
                xPoints = position(1)+position(3)*rand(1,n);
                yPoints = position(2)+position(4)*rand(1,n);
                color = [rand rand 0];
                lineColor = [1 1 0]-color;
                self.bodyHandle = patch( ...
                    'Parent', axes, ...
                    'XData', xPoints, ...
                    'YData', yPoints, ...
                    'DisplayName', self.name, ...
                    'FaceColor', color, ...
                    'EdgeColor', lineColor, ...
                    'LineStyle', ':', ...
                    'LineWidth', 1, ...
                    'ButtonDownFcn', callback, ...
                    'Selected', 'off', ...
                    'SelectionHighlight', 'on', ...
                    'UserData', self, ...
                    'Visible', 'on');
                
            else
                % create rounded rectangle for characters
                color = [rand, 0, rand];
                lineColor = [1 0 1]-color;
                self.bodyHandle = rectangle( ...
                    'Parent', axes, ...
                    'Curvature', [.5 .9], ...
                    'DisplayName', self.name, ...
                    'FaceColor', color, ...
                    'EdgeColor', lineColor, ...
                    'LineStyle', '-', ...
                    'LineWidth', 3, ...
                    'Position', position, ...
                    'ButtonDownFcn', callback, ...
                    'Selected', 'off', ...
                    'SelectionHighlight', 'on', ...
                    'UserData', self, ...
                    'Visible', 'on');
            end
            
            self.nameHandle = text( ...
                'Parent', axes, ...
                'BackgroundColor', color, ...
                'Color', lineColor, ...
                'Position', [position(1:2), 0], ...
                'String', self.name, ...
                'HitTest', 'off', ...
                'SelectionHighlight', 'off', ...
                'UserData', self, ...
                'Visible', 'on');
            
            self.damageHandle = text( ...
                'Parent', axes, ...
                'BackgroundColor', [0 0 0], ...
                'Color', [1 1 0], ...
                'Position', [position(1), position(2)+position(4), 0], ...
                'String', '0', ...
                'HitTest', 'off', ...
                'SelectionHighlight', 'off', ...
                'UserData', self, ...
                'Visible', 'off');
        end
        
        function attackOpponent(self, opponent)
            % do clipped-normal damage
            damage = max(0, normrnd(self.attackMean, self.attackMean/2));
            opponent.takeDamageAndShow(damage);
        end
        
        function takeDamageAndShow(self, damage)
            self.hp = self.hp - damage;
            if self.hp <=0
                self.dieAndShow;
            end
            set(self.damageHandle, ...
                'String', sprintf('%.1f', damage), ...
                'Visible', 'on');
        end
        
        function hideDamage(self)
            set(self.damageHandle, ...
                'String', '0', ...
                'Visible', 'off');
        end
        
        function dieAndShow(self)
            self.isDead = true;
            
            color = [0 0 0];
            lineColor = [1 1 1];
            set(self.bodyHandle, ...
                'FaceColor', color, ...
                'EdgeColor', lineColor, ...
                'ButtonDownFcn', [], ...
                'Selected', 'off', ...
                'SelectionHighlight', 'off', ...
                'Visible', 'on');
            set(self.nameHandle, ...
                'BackgroundColor', color, ...
                'Color', lineColor, ...
                'Visible', 'on');
            set(self.damageHandle, ...
                'BackgroundColor', color, ...
                'Color', lineColor, ...
                'Visible', 'on');
        end
        
        function delete(self)
            delete([self.bodyHandle, self.nameHandle, self.damageHandle]);
        end
    end
end