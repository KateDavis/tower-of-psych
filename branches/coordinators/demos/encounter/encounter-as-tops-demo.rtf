{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww16700\viewh11520\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs36 \cf0 Tower of Psych
\fs24 \
"Tower of Psych", or "tops", is a code project started by benjamin.heasly@gmail.com in July of 2009.  It aims to facilitate the design and running of psychophysics experiments in Matlab.  The idea is that a lot of psychophysics experiments have a lot of organization in common, and this organization should be factored into well-behaving classes with handy graphical interfaces.\
\
This document is intended as a tops survey and introduction.  It discusses the high-level philosophies and design choices of tops, some of the Matlab concepts used commonly in tops, and each of the four tops "foundataion" classes.\
\
A good follow-up to this document would be "encounter-as-tops-demo.rtf".  It explains the "encounter" game, which is one of the demos that comes with tops.  encounter synthesizes all the tops foundation classes into a game that is similar to a psychophysics experiment.\
\

\fs36 tops big ideas
\fs24 \
\

\fs36 tops Matlab concepts
\fs24 \
\

\fs36 tops foundation
\fs24 \
tops defines four "foundataion" classes that should support many different kinds of experiments:\
	-topsBlockTree manages experiment setup, tear-down, and traversal of various task and trial conditions.\
	-topsFunctionLoop; manages concurrent operations (e.g. checking user input while drawing graphics)\
	-topsModalList: holds arbitrary values and objects, grouped by operational modes (e.g. various tasks)\
	-topsDataLog: logs arbitrary values with timestamps and string mnemonics\
\
Each of these foundation classes comes [eventually] with a graphical user interface (gui).  Each gui's main job is to keep its appearance in sync with the foundation object it represents and thereby provide the user with a good look "under the hood" of that object.  In a few cases where it makes the most sense, a gui can also provide access to an object's methods or allow the user to edit an object's properties.\
\
\
%   Some goals for this demonstration:\
%   - Should use all of the tops foundation classes\
%   - Should be re-runnable with gameTree.run().\
%   - Should live in as few files as possible (hmmm...)\
%   - Should be a fun(ish) game to play\
%   - Should produce a science-worthy, reproduceable record of conditions\
%   and user/player responses.\
%   - Should depend only on Matlab (i.e. not Psychtoolbox)\
%\
%   The game is somewhat like the battle sequences in the Final Fantasy\
%   video games.  These sequences are good demonstrations of random\
%   repeated conditions (c.f. topsBlockTree, topsModalList), and event\
%   loops (c.f. topsFunctionLoop).  They also demonstrate a GUI and control\
%   branching, which are left up to this program to define.\
%\
%   The user/player should control a set of characters through several\
%   randomly selected battle sequences.  The game should end when the\
%   player completes all the sequences (win) or all of the player's\
%   characters die (lose).\
%\
%   For each battle sequence, there should be some number player-controled\
%   characters vs. some number of monsters.  All characters and monsters\
%   should have limited hit points and should damage each other by\
%   attacking. A character or monster should die and leave play when its\
%   hit points reach zero.  A battle sequence should end when either all\
%   the monsters or all the players have died.\
%\
%   Each battle should begin with a consistent set of characters vs. a set\
%   of monsters which was previously defined but randomly selected.\
%   Character states should be preserved between encounters (i.e. they\
%   should never get healed up) but monsters should be created fresh for\
%   each encounter.\
%\
%   Each character and each monster should be inactive during most of each\
%   sequence.  Each should periodically wake up.  When a monster wakes up,\
%   it should randomly selct a character to attack and deal damage to, from\
%   a random variable.  When a character wakes up, the user/player should\
%   be able to select a monster for that character to attack.  Then the\
%   character should attack that monster and deal it damage from a random\
%   variable.\
%\
%   Monsters should be able to wake up and attack while the user/player is\
%   performing selections.\
%\
%   When a character or monster is dealt damage, the damage amount should\
%   be displayed for a short, controllable duration near the graphical\
%   representation of the character or monster in the GUI.\
%\
%   The maximum and remining hit points of all the characters should always\
%   be displayed.  The monster's hit points should be hidden.\
%\
%   Copyright 2009 by benjamin.heasly@gmail.com\
 \
% TOP-LEVEL CONCEPTS\
%   figure with widgets in it (GUI)\
%   character objects, in a set\
%   Matlab figure mouse events\
%       Need to serialize when multiple characters wake up at once...\
%       separate queue: lock on character wake-up, unlock on mouse selection\
%   It seems like the major currency is the fevalable cell array \{@, ...\}\
%   The design habit is to define functions for narrow behaviors and let\
%   the tree and loop integreate them and the list communicate for them\
 \
% BATTLE-LEVEL CONCEPTS\
%   monster objects, in various sets\
%   concurrent behaviors\
%   user interaction\
%   random conditions\
%   resetting of battle sequence state\
 \
% EVENT LOOP\
%   drawnow\
%   tick battle timers\
%   dispatch next queued battle event\
%   check for battle sequence exit contitions\
 \
% TOP-LEVEL-BLOCK\
%   create GUI\
%   create event loop\
%\
%   create character group\
%   load character group into GUI\
%   create battle timer for each character, enqueue\
%\
%   create several groups of monsters\
%   create several battle blocks\
 \
% BATTLE BLOCK\
%   load monster group into GUI\
%   create battle timer for each monster, enqueue\
%   start event loop\
%   clear monster group form gui\
%   dequeue battle timer for each monster, destroy\
 \
% WISH LIST\
%   would like to have blockTree preview extend to function loop\
%       global mode?  ew.  special case for function loop? ew.\
%       "previewable" superclass?  maybe.\
%   similarly, might want to pass a parameter through run method.  Or not.\
%   want a singleton class to manage summary/log functions.\
%       should log events as \{time, mnemonic, data\}\
%       should sort by time.  online or offline?\
%       should index events from same mnemonic?\
%       should magage own allocation smartly\
%       modal list with time = precedence???  Fast enough?\
%       or [table(mnemonic)](time) = data;\
%       means no duplicate times and mnemonics\
%   One problem is that once things are "concurrent" and in queues, it gets\
%   harder to debug.  Order matters.  Visualization would help?\
}